// Copyright (c) 2013 Sami Väisänen, Ensisoft 
//
// http://www.ensisoft.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.

#pragma once

#include <string>

#ifdef _MSC_VER
#  undef hyper
#endif

// X11 poison 
#undef None

namespace wdk
{
    // Available mouse buttons. A "standard" mouse is expected to have
    // left and right buttons and a mouse wheel. 
    // Some mice also have more buttons in "non-standard" locations and
    // those are named thumbN buttons here.
    enum class MouseButton {
        None, 
        // Left right buttons
        Left, Right, 
        // Wheel button, wheel scroll up / down
        Wheel, WheelScrollUp, WheelScrollDown, 
        // Possible different thumb buttons
        Thumb1, Thumb2, Thumb3, Thumb4
    };

    // Keyboard event processing overview. When a keyboard key is pressed there are multiple levels
    // of processing that takes place and several different events that events the application
    // can react to. However not all of them are equal and some are better suited for some function
    // than the others.
    //
    // Going from lowest event to highest:
    //
    //   1) Scancodes: Each key event carries a native scancode (coming from the physical keyboard)
    //   which corresponds directly to the (physical) key pressed on the keyboard. Normally these are
    //   passed to the operating system which then uses some keyboard layout driver to map the key
    //   codes into virtual key symbols such as "escape key" or "enter key" and later on even to
    //   characters both of which are then made available to the application.
    //
    //   2) Virtual key symbols (and modifier keys): The virtual keys represent keys that are available
    //   on most (if not all) keyboards in a fairly universal fashion regardless of the region/language
    //   or the actual keyboard layout or the physical keyboard type (its engravings). It's important
    //   not to confuse virtual keys with characters. Virtual key symbol events do *not* represent
    //   characters but just key presses. Any such key press (or sequence, or a combination of a key
    //   and a modifier key) however can be translated into a character. Therefore it's important to
    //   understand that any *character* (such as double quote) cannot be represented as a virtual key.
    //   For example on the US keyboard double quote is a directly on a keycap and will correspond to
    //   a single key press. However on the FI layout one needs to press Shift+2.
    //   The virtual key symbols should provide safe and portable starting point for any application to
    //   react to some key presses.
    //
    //   3) Character input. Series of key presses (with modifier key presses)
    //   are translated to (Unicode) characters for character based input by the OS's layout system.
    //   The character generation is keyboard layout dependant. For example on the US layout a double
    //   quote is generated by a single key press whereas on a FI layout Shift+2 generates a double quote.

    // Key event modifier keys. Used as a bitwise OR flag
    enum class Keymod {
        // No known modifier
        None,
        // Shift key
        Shift,
        // Control key
        Control,
        // Alternate key
        Alt
    };

    // Primitive key symbol list represents the physical keys available on most (all?) keyboards.
    // See comments above about key event processing / virtual key symbols.
    enum class Keysym
    {
        None,                   // no known key
        Backspace,
        Tab,
        Enter,
        Space,
        Key0, 
        Key1, 
        Key2, 
        Key3, 
        Key4, 
        Key5, 
        Key6,
        Key7, 
        Key8, 
        Key9,
        KeyA, 
        KeyB, 
        KeyC, 
        KeyD, 
        KeyE, 
        KeyF, 
        KeyG, 
        KeyH, 
        KeyI, 
        KeyJ, 
        KeyK, 
        KeyL, 
        KeyM, 
        KeyN, 
        KeyO, 
        KeyP, 
        KeyQ, 
        KeyR, 
        KeyS, 
        KeyT, 
        KeyU, 
        KeyV, 
        KeyW, 
        KeyX, 
        KeyY,
        KeyZ,
        F1, 
        F2, 
        F3, 
        F4, 
        F5, 
        F6, 
        F7, 
        F8, 
        F9,
        F10, 
        F11, 
        F12,
        ControlR,
        ControlL,
        ShiftR,
        ShiftL,
        AltL,
        CapsLock,
        Insert,
        Del,
        Home,
        End,
        PageUp,
        PageDown,
        ArrowLeft,
        ArrowUp,
        ArrowDown,
        ArrowRight,
        Escape,
        Plus,
        Minus
    }; 

    // Map key modifier to a human readable name.
    std::string ToString(Keymod mod);

    // Map key symbol to a human readable name.
    std::string ToString(Keysym sym);

    // Map mouse button to a human readable name.
    std::string ToString(MouseButton btn);

} // wdk


