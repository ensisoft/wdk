
import os ;
import path ;
import common ;

lib X11     : : <name>X11  ;
lib Xcb     : : <name>xcb  ;
lib Xau     : : <name>Xau  ;
lib Xdmcp   : : <name>Xdmcp ;
lib Xxf86vm : : <name>Xxf86vm ;
lib Xext    : : <name>Xext ;
lib Xrandr  : : <name>Xrandr ;

# for windows 
path-constant GLES2_INC : "c:/imgtec_gles_sdk/Include" ;
path-constant GLES2_LIB : "c:/imgtec_gles_sdk/Lib" ;


project wdk 
: requirements
  <toolset>gcc:<cflags>-std=c++11
  <toolset>gcc:<cflags>-Wno-deprecated-declarations
  <toolset>clang:<cflags>-std=c++11
  <os>NT:<include>$(GLES2_INC)
  <include>include/
: usage-requirements
  <toolset>gcc:<cflags>-std=c++11
  <toolset>clang:<cflags>-std=c++11
  <os>LINUX:<library>/wdk//Xxf86vm/<link>shared
  <os>LINUX:<library>/wdk//X11/<link>shared
  <os>LINUX:<library>/wdk//Xcb/<link>shared
  <os>LINUX:<library>/wdk//Xau/<link>shared
  <os>LINUX:<library>/wdk//Xdmcp/<link>shared
  <os>LINUX:<library>/wdk//Xext/<link>shared
  <os>LINUX:<library>/wdk//Xrandr/<link>shared
  ;


if [ os.name ] = LINUX
{
  lib EGL   : : <name>EGL ;
  lib GLES2 : : <name>GLESv2 ;
  lib GL    : : <name>GL ;

  lib linux : [ glob *.cpp ] [ glob X11/*.cpp ] : <link>static ;

  lib wdk-mobile  : [ glob EGL/*.cpp ] linux : <link>static : <define>WDK_MOBILE ;
  lib wdk-desktop : [ glob GLX/*.cpp ] linux : <link>static ;

}

if [ os.name ] = NT
{
  lib EGL   : : <name>libEGL <search>$(GLES2_LIB) ;
  lib GLES2 : : <name>libGLESv2 <search>$(GLES2_LIB) ;
  lib GL    : : <name>opengl32 ;

  lib win32 : [ glob *.cpp ] [ glob win32/*.cpp ] : <link>static ;

  lib wdk-mobile  : [ glob EGL/*.cpp ] win32 : <link>static : <define>WDK_MOBILE ;

  lib wdk-desktop : [ glob WGL/*.cpp ] win32 : <link>static ;

}

local headers = [ glob-tree *.h : utf8.h boost* include ] ;

install include/wdk 
 : $(headers) 
 : <install-source-root>.
 ;


# 
# samples
#


#
# open a window and print events to the console
#
exe events : sample/events.cpp wdk-desktop ;


#
# render a simple triangle using OpenGL
#
exe triangle-opengl-gl : [ obj triangle_GL_2 : sample/triangle.cpp : ]  wdk-desktop GL ;


#
# render a simple triangle using OpenGL ES
#
exe triangle-opengl-es : [ obj triangle_GL_ES : sample/triangle.cpp : <define>SAMPLE_GLES ] wdk-mobile GLES2 EGL ;
